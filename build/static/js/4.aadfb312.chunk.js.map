{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/SingleQuote.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","SingleQuote","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","Fragment","path","exact","to","url"],"mappings":"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","file":"static/js/4.aadfb312.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2S85e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__31D1R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2fTXi\",\"loading\":\"NewCommentForm_loading__3wHt0\",\"control\":\"NewCommentForm_control__2RNCc\",\"actions\":\"NewCommentForm_actions__2DNC1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1KtyS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3C0LY\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const {onAddedComment} = props\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // send comment to server\n    sendRequest({\n      commentData: {text: enteredText},\n      quoteId: props.quoteId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const params = useParams();\n  const { quoteId } = params;\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { sendRequest, status, data: loadedComments, error } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && (loadedComments || loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>There are currently no comments!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import React from 'react';\r\nimport { useParams, Link, useRouteMatch } from 'react-router-dom';\r\nimport { Route } from 'react-router-dom';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport { useEffect } from 'react';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst SingleQuote = () => {\r\n  const match = useRouteMatch();\r\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  console.log(loadedQuote);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered focused'>{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h1>This is the single quote page</h1>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className='centered'>\r\n          <Link className='btn--flat' to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleQuote;\r\n"],"sourceRoot":""}